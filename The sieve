{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eratosthenes(upper, verbosity = False):\n",
    "    \"\"\"Return the list of primes up the given upper bound using the sieve of Eratosthenes algorithm\"\"\"\n",
    "    primes = list(range(2,upper+1)) # all numbers between 1 and upper\n",
    "    divisor = 1 # initial divisor\n",
    "    while True: # loop until break is invoked\n",
    "        divisor += 1 # next divisor\n",
    "        if divisor > upper: # checked all divisors up to upper\n",
    "            break\n",
    "        i=0 # check for divisibility starting from the first element of remaining list\n",
    "        while i < len(primes): # until the end of the list (which changes length inside the loop)\n",
    "            if primes[i] > divisor and primes[i] % divisor == 0:\n",
    "                # remove divisible, except the divisor itself\n",
    "                primes.remove(primes[i]) # remove, next is with the same index\n",
    "            else:\n",
    "                i += 1 # skip to go to next element\n",
    "        if verbosity == True: print(\"divisor %d:\"%divisor,primes)\n",
    "    if verbosity == True: print(\"Primes up to %d are:\"%upper,primes)\n",
    "    return primes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "divisor 2: [2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n",
      "divisor 3: [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]\n",
      "divisor 4: [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]\n",
      "divisor 5: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 6: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 7: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 8: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 9: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 10: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 11: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 12: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 13: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 14: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 15: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 16: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 17: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 18: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 19: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 20: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 21: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 22: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 23: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 24: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 25: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "Primes up to 25 are: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2, 3, 5, 7, 11, 13, 17, 19, 23]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eratosthenes(25,verbosity=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5]\n"
     ]
    }
   ],
   "source": [
    "x = eratosthenes(5)\n",
    "print(x) #should print [2,3,5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of primes up to 2500 is  367\n"
     ]
    }
   ],
   "source": [
    "x = eratosthenes(2500)\n",
    "print('Number of primes up to 2500 is ',len(x)) #should print \"Number of primes up to 2500 is 368\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import timeit\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = [12, 8]\n",
    "\n",
    "N = 25\n",
    "n,x = [0,] * N, [0,] * N  # lists to accumulate the data\n",
    "for i,k in [(i,5*i) for i in range(N)]:\n",
    "    n[i] = k\n",
    "    x[i] = timeit.timeit(stmt='eratosthenes(k)', number=1000, globals=globals())/1000\n",
    "\n",
    "plt.plot(n,x)\n",
    "plt.xlabel('upper bound')\n",
    "plt.ylabel('average run time, sec')\n",
    "plt.show()\n",
    "#computational complexity could be N^2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def eratosthenes_better(upper, verbosity = False):\n",
    "    \"\"\"Return the list of primes up the given upper bound using the sieve of Eratosthenes algorithm\"\"\"\n",
    "    primes = list(range(2,upper+1)) # all numbers between 1 and upper\n",
    "    divisor = 2 # initial divisor\n",
    "    a=0\n",
    "    while True: # loop until break is invoked\n",
    "        if divisor**2 > upper: # checked all divisors up to upper\n",
    "            break\n",
    "        i=primes.index(divisor**2)\n",
    "        while i < len(primes): # until the end of the list (which changes length inside the loop)\n",
    "            if primes[i] % divisor == 0:\n",
    "                # remove divisible, except the divisor itself\n",
    "                primes.remove(primes[i]) # remove, next is with the same index\n",
    "            else:\n",
    "                i += 1 # skip to go to next element\n",
    "        if verbosity == True: print(\"divisor %d:\"%divisor,primes)\n",
    "        a += 1\n",
    "        divisor = primes[a]\n",
    "    if verbosity == True: print(\"Primes up to %d are:\"%upper,primes)\n",
    "    return primes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "divisor 2: [2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n",
      "divisor 3: [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]\n",
      "divisor 4: [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]\n",
      "divisor 5: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 6: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 7: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 8: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 9: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 10: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 11: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 12: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 13: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 14: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 15: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 16: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 17: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 18: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 19: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 20: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 21: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 22: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 23: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 24: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 25: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "Primes up to 25 are: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "divisor 2: [2, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n",
      "divisor 3: [2, 3, 5, 7, 11, 13, 17, 19, 23, 25]\n",
      "divisor 5: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n",
      "Primes up to 25 are: [2, 3, 5, 7, 11, 13, 17, 19, 23]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2, 3, 5, 7, 11, 13, 17, 19, 23]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "eratosthenes(25,verbosity=True) #should print the steps of the algorithm\n",
    "eratosthenes_better(25,verbosity=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5]\n",
      "[2, 3, 5]\n"
     ]
    }
   ],
   "source": [
    "x = eratosthenes(5)\n",
    "print(x) #should print [2,3,5]\n",
    "x = eratosthenes_better(5)\n",
    "print(x) #should print [2,3,5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of primes up to 2500 is  367\n",
      "Number of primes up to 2500 is  367\n"
     ]
    }
   ],
   "source": [
    "x = eratosthenes(2500)\n",
    "print('Number of primes up to 2500 is ',len(x)) #should print \"Number of primes up to 2500 is 368\"\n",
    "x = eratosthenes_better(2500)\n",
    "print('Number of primes up to 2500 is ',len(x)) #should print \"Number of primes up to 2500 is 368\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = [12, 8]\n",
    "\n",
    "N = 25\n",
    "n,x,y = [0,] * N, [0,] * N, [0,] * N # lists to accumulate the data\n",
    "for i,k in [(i,5*i) for i in range(N)]:\n",
    "    n[i] = k\n",
    "    x[i] = timeit.timeit(stmt='eratosthenes(k)', number=1000, globals=globals())/1000  # run time of original algorithm\n",
    "    y[i] = timeit.timeit(stmt='eratosthenes_better(k)', number=1000, globals=globals())/1000  # run time of improved algorithm\n",
    "\n",
    "plt.plot(n,x,label='Original algorithm')\n",
    "plt.plot(n,y,label='Improved algorithm')\n",
    "plt.xlabel('upper bound')\n",
    "plt.ylabel('average run time, sec')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Feedback:** well done!\n",
    "\n",
    "- list `index` method is inefficient in the situation it could be avoided \n",
    "\n",
    "**Grade for this task:** 9 out of 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Suggested solution\n",
    "def eratosthenes_better(upper, verbosity = False):\n",
    "    \"\"\"Return the list of primes up the given upper bound using the sieve of Eratosthenes algorithm\"\"\"\n",
    "    primes = list(range(2,upper+1)) # all numbers between 1 and upper\n",
    "    idiv = 0 # index of the initial divisor\n",
    "    while True:\n",
    "        divisor = primes[idiv] # next divisor comes from the list of primes\n",
    "        # next number that is not filtered out is not divisible by any number\n",
    "        # below 'divisor', thus it is divisor square!\n",
    "        if divisor**2 > upper: # next candidate for deletion is already above upper bound\n",
    "            break\n",
    "        i=idiv+1 # start filtering out from number next to the current divisor\n",
    "        while i < len(primes):\n",
    "            if primes[i] < divisor**2:\n",
    "                i += 1 # skip numbers below divisor square\n",
    "            elif primes[i] % divisor == 0:\n",
    "                primes.remove(primes[i]) # remove, do not increment index to go to next element\n",
    "            else:\n",
    "                i += 1 # go to next\n",
    "        idiv += 1 # index of next divisor from the list of remaining primes\n",
    "        if verbosity: print(\"divisor %d:\"%divisor,primes)\n",
    "    if verbosity: print(\"Primes up to %d are:\"%upper,primes)\n",
    "    return primes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
